generator client {
    provider = "prisma-client-js"
    output   = "../src/generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Модель пользователя Telegram
model TelegramUser {
    id         Int      @id @default(autoincrement())
    telegramId BigInt   @unique @map("telegram_id")
    createdAt  DateTime @default(now()) @map("created_at")
    updatedAt  DateTime @updatedAt @map("updated_at")

    // Связь с голосованием
    votes PlayerVote[]

    @@map("telegram_users")
}

// Модель выпуска (релиза)
model Release {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Информация о логотипе
    logoKey         String? @map("logo_key")
    logoFilename    String? @map("logo_filename")
    logoContentType String? @map("logo_content_type")

    // Связь с игроками
    players Player[]

    @@map("releases")
}

// Модель игрока
model Player {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Связь с выпуском
    releaseId Int     @map("release_id")
    release   Release @relation(fields: [releaseId], references: [id])

    // Информация о фотографии
    photoKey         String? @map("photo_key")
    photoFilename    String? @map("photo_filename")
    photoContentType String? @map("photo_content_type")

    // Связь с голосованием
    votes PlayerVote[]

    @@map("players")
}

// Модель категорий для голосования
model PlayerCategory {
    id          Int      @id @default(autoincrement())
    name        String   @unique
    title       String
    description String?
    maxPlaces   Int      @map("max_places")
    sortOrder   Int      @map("sort_order")
    createdAt   DateTime @default(now()) @map("created_at")
    updatedAt   DateTime @updatedAt @map("updated_at")

    // Связь с голосами
    votes PlayerVote[]

    @@map("player_categories")
}

// Модель голосования за игроков
model PlayerVote {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    // Связь с игроком
    playerId Int    @map("player_id")
    player   Player @relation(fields: [playerId], references: [id])

    // Связь с пользователем
    userId Int          @map("user_id")
    user   TelegramUser @relation(fields: [userId], references: [id])

    // Связь с категорией
    categoryId Int            @map("category_id")
    category   PlayerCategory @relation(fields: [categoryId], references: [id])

    // Уникальность: один игрок - один голос от пользователя
    @@unique([playerId, userId])
    @@map("player_votes")
}
