import TelegramBot from 'node-telegram-bot-api';
import prisma from '../database/prisma';

class TelegramService {
	private bot: TelegramBot;

	constructor() {
		const token = process.env.TELEGRAM_BOT_TOKEN;

		if (!token) {
			throw new Error('TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
		}

		// –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ - webhooks
		const options: TelegramBot.ConstructorOptions = {};
		if (process.env.NODE_ENV !== 'production') {
			options.polling = true;
		}

		this.bot = new TelegramBot(token, options);

		// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º long polling, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—Ä–∞–∑—É
		if (options.polling) {
			this.setupEventHandlers();
		}
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Ä–µ–∂–∏–º–∞ polling
	private setupEventHandlers(): void {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
		this.bot.onText(/\/start/, async (msg) => {
			await this.handleStartCommand(msg);
		});

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
		this.bot.on('error', (error) => {
			console.error('Telegram bot error:', error);
		});

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ polling_error
		this.bot.on('polling_error', (error) => {
			console.error('Telegram polling error:', error);
		});

		console.log('Telegram –±–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Long Polling');
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook
	public initWebhook(url: string): void {
		this.bot.setWebHook(`${url}/api/telegram/webhook`);
	}

	// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Å—Ç–∞–Ω—Å–∞ –±–æ—Ç–∞
	public getBot(): TelegramBot {
		return this.bot;
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Telegram
	public async processUpdate(update: TelegramBot.Update): Promise<void> {
		if (update.message && update.message.text === '/start') {
			await this.handleStartCommand(update.message);
		}
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
	private async handleStartCommand(
		message: TelegramBot.Message,
	): Promise<void> {
		const { from } = message;

		if (!from) return;

		try {
			// –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			const existingUser = await prisma.telegramUser.findUnique({
				where: { telegramId: BigInt(from.id) },
			});

			if (!existingUser) {
				// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				await prisma.telegramUser.create({
					data: {
						telegramId: BigInt(from.id),
						username: from.username || null,
						firstName: from.first_name || null,
						lastName: from.last_name || null,
					},
				});

				// todo: —É–±—Ä–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å
				console.log(
					`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${from.username || from.id}`,
				);
			}

			// –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
			await this.bot.sendMessage(
				from.id,
				`–ü—Ä–∏–≤–µ—Ç, ${
					from.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
				}! üëã\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç.`,
			);
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start:', error);
		}
	}
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
const telegramService = new TelegramService();
export default telegramService;
